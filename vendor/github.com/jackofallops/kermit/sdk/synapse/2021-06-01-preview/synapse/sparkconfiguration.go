package synapse

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"net/http"

	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
)

// SparkConfigurationClient is the client for the SparkConfiguration methods of the Synapse service.
type SparkConfigurationClient struct {
	BaseClient
}

// NewSparkConfigurationClient creates an instance of the SparkConfigurationClient client.
func NewSparkConfigurationClient(endpoint string) SparkConfigurationClient {
	return SparkConfigurationClient{New(endpoint)}
}

// CreateOrUpdateSparkConfiguration creates or updates a sparkconfiguration.
// Parameters:
// sparkConfigurationName - the spark Configuration name.
// sparkConfiguration - sparkConfiguration resource definition.
// ifMatch - eTag of the sparkConfiguration entity.  Should only be specified for update, for which it should
// match existing entity or can be * for unconditional update.
func (client SparkConfigurationClient) CreateOrUpdateSparkConfiguration(ctx context.Context, sparkConfigurationName string, sparkConfiguration SparkConfigurationResource, ifMatch string) (result SparkConfigurationCreateOrUpdateSparkConfigurationFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SparkConfigurationClient.CreateOrUpdateSparkConfiguration")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: sparkConfiguration,
			Constraints: []validation.Constraint{{Target: "sparkConfiguration.Properties", Name: validation.Null, Rule: true,
				Chain: []validation.Constraint{{Target: "sparkConfiguration.Properties.Configs", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("synapse.SparkConfigurationClient", "CreateOrUpdateSparkConfiguration", err.Error())
	}

	req, err := client.CreateOrUpdateSparkConfigurationPreparer(ctx, sparkConfigurationName, sparkConfiguration, ifMatch)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "CreateOrUpdateSparkConfiguration", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateSparkConfigurationSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "CreateOrUpdateSparkConfiguration", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreateOrUpdateSparkConfigurationPreparer prepares the CreateOrUpdateSparkConfiguration request.
func (client SparkConfigurationClient) CreateOrUpdateSparkConfigurationPreparer(ctx context.Context, sparkConfigurationName string, sparkConfiguration SparkConfigurationResource, ifMatch string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"sparkConfigurationName": autorest.Encode("path", sparkConfigurationName),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{endpoint}", urlParameters),
		autorest.WithPathParameters("/sparkconfigurations/{sparkConfigurationName}", pathParameters),
		autorest.WithJSON(sparkConfiguration),
		autorest.WithQueryParameters(queryParameters))
	if len(ifMatch) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("If-Match", autorest.String(ifMatch)))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateSparkConfigurationSender sends the CreateOrUpdateSparkConfiguration request. The method will close the
// http.Response Body if it receives an error.
func (client SparkConfigurationClient) CreateOrUpdateSparkConfigurationSender(req *http.Request) (future SparkConfigurationCreateOrUpdateSparkConfigurationFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateSparkConfigurationResponder handles the response to the CreateOrUpdateSparkConfiguration request. The method always
// closes the http.Response Body.
func (client SparkConfigurationClient) CreateOrUpdateSparkConfigurationResponder(resp *http.Response) (result SparkConfigurationResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteSparkConfiguration deletes a sparkConfiguration.
// Parameters:
// sparkConfigurationName - the spark Configuration name.
func (client SparkConfigurationClient) DeleteSparkConfiguration(ctx context.Context, sparkConfigurationName string) (result SparkConfigurationDeleteSparkConfigurationFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SparkConfigurationClient.DeleteSparkConfiguration")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteSparkConfigurationPreparer(ctx, sparkConfigurationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "DeleteSparkConfiguration", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSparkConfigurationSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "DeleteSparkConfiguration", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeleteSparkConfigurationPreparer prepares the DeleteSparkConfiguration request.
func (client SparkConfigurationClient) DeleteSparkConfigurationPreparer(ctx context.Context, sparkConfigurationName string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"sparkConfigurationName": autorest.Encode("path", sparkConfigurationName),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{endpoint}", urlParameters),
		autorest.WithPathParameters("/sparkconfigurations/{sparkConfigurationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSparkConfigurationSender sends the DeleteSparkConfiguration request. The method will close the
// http.Response Body if it receives an error.
func (client SparkConfigurationClient) DeleteSparkConfigurationSender(req *http.Request) (future SparkConfigurationDeleteSparkConfigurationFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// DeleteSparkConfigurationResponder handles the response to the DeleteSparkConfiguration request. The method always
// closes the http.Response Body.
func (client SparkConfigurationClient) DeleteSparkConfigurationResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetSparkConfiguration gets a sparkConfiguration.
// Parameters:
// sparkConfigurationName - the spark Configuration name.
// ifNoneMatch - eTag of the sparkConfiguration entity. Should only be specified for get. If the ETag matches
// the existing entity tag, or if * was provided, then no content will be returned.
func (client SparkConfigurationClient) GetSparkConfiguration(ctx context.Context, sparkConfigurationName string, ifNoneMatch string) (result SparkConfigurationResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SparkConfigurationClient.GetSparkConfiguration")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetSparkConfigurationPreparer(ctx, sparkConfigurationName, ifNoneMatch)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "GetSparkConfiguration", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSparkConfigurationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "GetSparkConfiguration", resp, "Failure sending request")
		return
	}

	result, err = client.GetSparkConfigurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "GetSparkConfiguration", resp, "Failure responding to request")
		return
	}

	return
}

// GetSparkConfigurationPreparer prepares the GetSparkConfiguration request.
func (client SparkConfigurationClient) GetSparkConfigurationPreparer(ctx context.Context, sparkConfigurationName string, ifNoneMatch string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"sparkConfigurationName": autorest.Encode("path", sparkConfigurationName),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{endpoint}", urlParameters),
		autorest.WithPathParameters("/sparkconfigurations/{sparkConfigurationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if len(ifNoneMatch) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("If-None-Match", autorest.String(ifNoneMatch)))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSparkConfigurationSender sends the GetSparkConfiguration request. The method will close the
// http.Response Body if it receives an error.
func (client SparkConfigurationClient) GetSparkConfigurationSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetSparkConfigurationResponder handles the response to the GetSparkConfiguration request. The method always
// closes the http.Response Body.
func (client SparkConfigurationClient) GetSparkConfigurationResponder(resp *http.Response) (result SparkConfigurationResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotModified),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetSparkConfigurationsByWorkspace lists sparkconfigurations.
func (client SparkConfigurationClient) GetSparkConfigurationsByWorkspace(ctx context.Context) (result SparkConfigurationListResponsePage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SparkConfigurationClient.GetSparkConfigurationsByWorkspace")
		defer func() {
			sc := -1
			if result.sclr.Response.Response != nil {
				sc = result.sclr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.getSparkConfigurationsByWorkspaceNextResults
	req, err := client.GetSparkConfigurationsByWorkspacePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "GetSparkConfigurationsByWorkspace", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSparkConfigurationsByWorkspaceSender(req)
	if err != nil {
		result.sclr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "GetSparkConfigurationsByWorkspace", resp, "Failure sending request")
		return
	}

	result.sclr, err = client.GetSparkConfigurationsByWorkspaceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "GetSparkConfigurationsByWorkspace", resp, "Failure responding to request")
		return
	}
	if result.sclr.hasNextLink() && result.sclr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// GetSparkConfigurationsByWorkspacePreparer prepares the GetSparkConfigurationsByWorkspace request.
func (client SparkConfigurationClient) GetSparkConfigurationsByWorkspacePreparer(ctx context.Context) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{endpoint}", urlParameters),
		autorest.WithPath("/sparkconfigurations"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSparkConfigurationsByWorkspaceSender sends the GetSparkConfigurationsByWorkspace request. The method will close the
// http.Response Body if it receives an error.
func (client SparkConfigurationClient) GetSparkConfigurationsByWorkspaceSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetSparkConfigurationsByWorkspaceResponder handles the response to the GetSparkConfigurationsByWorkspace request. The method always
// closes the http.Response Body.
func (client SparkConfigurationClient) GetSparkConfigurationsByWorkspaceResponder(resp *http.Response) (result SparkConfigurationListResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// getSparkConfigurationsByWorkspaceNextResults retrieves the next set of results, if any.
func (client SparkConfigurationClient) getSparkConfigurationsByWorkspaceNextResults(ctx context.Context, lastResults SparkConfigurationListResponse) (result SparkConfigurationListResponse, err error) {
	req, err := lastResults.sparkConfigurationListResponsePreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "getSparkConfigurationsByWorkspaceNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.GetSparkConfigurationsByWorkspaceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "getSparkConfigurationsByWorkspaceNextResults", resp, "Failure sending next results request")
	}
	result, err = client.GetSparkConfigurationsByWorkspaceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "getSparkConfigurationsByWorkspaceNextResults", resp, "Failure responding to next results request")
	}
	return
}

// GetSparkConfigurationsByWorkspaceComplete enumerates all values, automatically crossing page boundaries as required.
func (client SparkConfigurationClient) GetSparkConfigurationsByWorkspaceComplete(ctx context.Context) (result SparkConfigurationListResponseIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SparkConfigurationClient.GetSparkConfigurationsByWorkspace")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.GetSparkConfigurationsByWorkspace(ctx)
	return
}

// RenameSparkConfiguration renames a sparkConfiguration.
// Parameters:
// sparkConfigurationName - the spark Configuration name.
// request - proposed new name.
func (client SparkConfigurationClient) RenameSparkConfiguration(ctx context.Context, sparkConfigurationName string, request ArtifactRenameRequest) (result SparkConfigurationRenameSparkConfigurationFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SparkConfigurationClient.RenameSparkConfiguration")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: request,
			Constraints: []validation.Constraint{{Target: "request.NewName", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "request.NewName", Name: validation.MaxLength, Rule: 260, Chain: nil},
					{Target: "request.NewName", Name: validation.MinLength, Rule: 1, Chain: nil},
					{Target: "request.NewName", Name: validation.Pattern, Rule: `^[A-Za-z0-9_][^<>*#.%&:\\+?/]*$`, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("synapse.SparkConfigurationClient", "RenameSparkConfiguration", err.Error())
	}

	req, err := client.RenameSparkConfigurationPreparer(ctx, sparkConfigurationName, request)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "RenameSparkConfiguration", nil, "Failure preparing request")
		return
	}

	result, err = client.RenameSparkConfigurationSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "synapse.SparkConfigurationClient", "RenameSparkConfiguration", result.Response(), "Failure sending request")
		return
	}

	return
}

// RenameSparkConfigurationPreparer prepares the RenameSparkConfiguration request.
func (client SparkConfigurationClient) RenameSparkConfigurationPreparer(ctx context.Context, sparkConfigurationName string, request ArtifactRenameRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"sparkConfigurationName": autorest.Encode("path", sparkConfigurationName),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{endpoint}", urlParameters),
		autorest.WithPathParameters("/sparkconfigurations/{sparkConfigurationName}/rename", pathParameters),
		autorest.WithJSON(request),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RenameSparkConfigurationSender sends the RenameSparkConfiguration request. The method will close the
// http.Response Body if it receives an error.
func (client SparkConfigurationClient) RenameSparkConfigurationSender(req *http.Request) (future SparkConfigurationRenameSparkConfigurationFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// RenameSparkConfigurationResponder handles the response to the RenameSparkConfiguration request. The method always
// closes the http.Response Body.
func (client SparkConfigurationClient) RenameSparkConfigurationResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}
