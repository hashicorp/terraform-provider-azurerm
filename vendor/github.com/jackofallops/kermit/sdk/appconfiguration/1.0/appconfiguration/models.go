package appconfiguration

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"github.com/Azure/go-autorest/tracing"
)

// The package's fully qualified name.
const fqdn = "home/runner/work/kermit/kermit/sdk/appconfiguration/1.0/appconfiguration"

// Error azure App Configuration error object.
type Error struct {
	// Type - The type of the error.
	Type *string `json:"type,omitempty"`
	// Title - A brief summary of the error.
	Title *string `json:"title,omitempty"`
	// Name - The name of the parameter that resulted in the error.
	Name *string `json:"name,omitempty"`
	// Detail - A detailed description of the error.
	Detail *string `json:"detail,omitempty"`
	// Status - The HTTP status code that the error maps to.
	Status *int32 `json:"status,omitempty"`
}

// Key ...
type Key struct {
	// Name - READ-ONLY
	Name *string `json:"name,omitempty"`
}

// MarshalJSON is the custom marshaler for Key.
func (kVar Key) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// KeyListResult the result of a list request.
type KeyListResult struct {
	autorest.Response `json:"-"`
	// Items - The collection value.
	Items *[]Key `json:"items,omitempty"`
	// NextLink - The URI that can be used to request the next set of paged results.
	NextLink *string `json:"@nextLink,omitempty"`
}

// KeyListResultIterator provides access to a complete listing of Key values.
type KeyListResultIterator struct {
	i    int
	page KeyListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *KeyListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/KeyListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *KeyListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter KeyListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter KeyListResultIterator) Response() KeyListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter KeyListResultIterator) Value() Key {
	if !iter.page.NotDone() {
		return Key{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the KeyListResultIterator type.
func NewKeyListResultIterator(page KeyListResultPage) KeyListResultIterator {
	return KeyListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (klr KeyListResult) IsEmpty() bool {
	return klr.Items == nil || len(*klr.Items) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (klr KeyListResult) hasNextLink() bool {
	return klr.NextLink != nil && len(*klr.NextLink) != 0
}

// keyListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (klr KeyListResult) keyListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !klr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(klr.NextLink)))
}

// KeyListResultPage contains a page of Key values.
type KeyListResultPage struct {
	fn  func(context.Context, KeyListResult) (KeyListResult, error)
	klr KeyListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *KeyListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/KeyListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.klr)
		if err != nil {
			return err
		}
		page.klr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *KeyListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page KeyListResultPage) NotDone() bool {
	return !page.klr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page KeyListResultPage) Response() KeyListResult {
	return page.klr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page KeyListResultPage) Values() []Key {
	if page.klr.IsEmpty() {
		return nil
	}
	return *page.klr.Items
}

// Creates a new instance of the KeyListResultPage type.
func NewKeyListResultPage(cur KeyListResult, getNextPage func(context.Context, KeyListResult) (KeyListResult, error)) KeyListResultPage {
	return KeyListResultPage{
		fn:  getNextPage,
		klr: cur,
	}
}

// KeyValue ...
type KeyValue struct {
	autorest.Response `json:"-"`
	Key               *string            `json:"key,omitempty"`
	Label             *string            `json:"label,omitempty"`
	ContentType       *string            `json:"content_type,omitempty"`
	Value             *string            `json:"value,omitempty"`
	LastModified      *date.Time         `json:"last_modified,omitempty"`
	Tags              map[string]*string `json:"tags"`
	Locked            *bool              `json:"locked,omitempty"`
	Etag              *string            `json:"etag,omitempty"`
}

// MarshalJSON is the custom marshaler for KeyValue.
func (kv KeyValue) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if kv.Key != nil {
		objectMap["key"] = kv.Key
	}
	if kv.Label != nil {
		objectMap["label"] = kv.Label
	}
	if kv.ContentType != nil {
		objectMap["content_type"] = kv.ContentType
	}
	if kv.Value != nil {
		objectMap["value"] = kv.Value
	}
	if kv.LastModified != nil {
		objectMap["last_modified"] = kv.LastModified
	}
	if kv.Tags != nil {
		objectMap["tags"] = kv.Tags
	}
	if kv.Locked != nil {
		objectMap["locked"] = kv.Locked
	}
	if kv.Etag != nil {
		objectMap["etag"] = kv.Etag
	}
	return json.Marshal(objectMap)
}

// KeyValueListResult the result of a list request.
type KeyValueListResult struct {
	autorest.Response `json:"-"`
	// Items - The collection value.
	Items *[]KeyValue `json:"items,omitempty"`
	// NextLink - The URI that can be used to request the next set of paged results.
	NextLink *string `json:"@nextLink,omitempty"`
}

// KeyValueListResultIterator provides access to a complete listing of KeyValue values.
type KeyValueListResultIterator struct {
	i    int
	page KeyValueListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *KeyValueListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/KeyValueListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *KeyValueListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter KeyValueListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter KeyValueListResultIterator) Response() KeyValueListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter KeyValueListResultIterator) Value() KeyValue {
	if !iter.page.NotDone() {
		return KeyValue{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the KeyValueListResultIterator type.
func NewKeyValueListResultIterator(page KeyValueListResultPage) KeyValueListResultIterator {
	return KeyValueListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (kvlr KeyValueListResult) IsEmpty() bool {
	return kvlr.Items == nil || len(*kvlr.Items) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (kvlr KeyValueListResult) hasNextLink() bool {
	return kvlr.NextLink != nil && len(*kvlr.NextLink) != 0
}

// keyValueListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (kvlr KeyValueListResult) keyValueListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !kvlr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(kvlr.NextLink)))
}

// KeyValueListResultPage contains a page of KeyValue values.
type KeyValueListResultPage struct {
	fn   func(context.Context, KeyValueListResult) (KeyValueListResult, error)
	kvlr KeyValueListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *KeyValueListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/KeyValueListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.kvlr)
		if err != nil {
			return err
		}
		page.kvlr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *KeyValueListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page KeyValueListResultPage) NotDone() bool {
	return !page.kvlr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page KeyValueListResultPage) Response() KeyValueListResult {
	return page.kvlr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page KeyValueListResultPage) Values() []KeyValue {
	if page.kvlr.IsEmpty() {
		return nil
	}
	return *page.kvlr.Items
}

// Creates a new instance of the KeyValueListResultPage type.
func NewKeyValueListResultPage(cur KeyValueListResult, getNextPage func(context.Context, KeyValueListResult) (KeyValueListResult, error)) KeyValueListResultPage {
	return KeyValueListResultPage{
		fn:   getNextPage,
		kvlr: cur,
	}
}

// Label ...
type Label struct {
	// Name - READ-ONLY
	Name *string `json:"name,omitempty"`
}

// MarshalJSON is the custom marshaler for Label.
func (l Label) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// LabelListResult the result of a list request.
type LabelListResult struct {
	autorest.Response `json:"-"`
	// Items - The collection value.
	Items *[]Label `json:"items,omitempty"`
	// NextLink - The URI that can be used to request the next set of paged results.
	NextLink *string `json:"@nextLink,omitempty"`
}

// LabelListResultIterator provides access to a complete listing of Label values.
type LabelListResultIterator struct {
	i    int
	page LabelListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *LabelListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/LabelListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *LabelListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter LabelListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter LabelListResultIterator) Response() LabelListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter LabelListResultIterator) Value() Label {
	if !iter.page.NotDone() {
		return Label{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the LabelListResultIterator type.
func NewLabelListResultIterator(page LabelListResultPage) LabelListResultIterator {
	return LabelListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (llr LabelListResult) IsEmpty() bool {
	return llr.Items == nil || len(*llr.Items) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (llr LabelListResult) hasNextLink() bool {
	return llr.NextLink != nil && len(*llr.NextLink) != 0
}

// labelListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (llr LabelListResult) labelListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !llr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(llr.NextLink)))
}

// LabelListResultPage contains a page of Label values.
type LabelListResultPage struct {
	fn  func(context.Context, LabelListResult) (LabelListResult, error)
	llr LabelListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *LabelListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/LabelListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.llr)
		if err != nil {
			return err
		}
		page.llr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *LabelListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page LabelListResultPage) NotDone() bool {
	return !page.llr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page LabelListResultPage) Response() LabelListResult {
	return page.llr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page LabelListResultPage) Values() []Label {
	if page.llr.IsEmpty() {
		return nil
	}
	return *page.llr.Items
}

// Creates a new instance of the LabelListResultPage type.
func NewLabelListResultPage(cur LabelListResult, getNextPage func(context.Context, LabelListResult) (LabelListResult, error)) LabelListResultPage {
	return LabelListResultPage{
		fn:  getNextPage,
		llr: cur,
	}
}
