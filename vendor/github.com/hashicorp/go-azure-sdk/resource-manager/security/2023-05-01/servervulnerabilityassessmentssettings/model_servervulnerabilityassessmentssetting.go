package servervulnerabilityassessmentssettings

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/systemdata"
)

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type ServerVulnerabilityAssessmentsSetting interface {
	ServerVulnerabilityAssessmentsSetting() BaseServerVulnerabilityAssessmentsSettingImpl
}

var _ ServerVulnerabilityAssessmentsSetting = BaseServerVulnerabilityAssessmentsSettingImpl{}

type BaseServerVulnerabilityAssessmentsSettingImpl struct {
	Id         *string                                   `json:"id,omitempty"`
	Kind       ServerVulnerabilityAssessmentsSettingKind `json:"kind"`
	Name       *string                                   `json:"name,omitempty"`
	SystemData *systemdata.SystemData                    `json:"systemData,omitempty"`
	Type       *string                                   `json:"type,omitempty"`
}

func (s BaseServerVulnerabilityAssessmentsSettingImpl) ServerVulnerabilityAssessmentsSetting() BaseServerVulnerabilityAssessmentsSettingImpl {
	return s
}

var _ ServerVulnerabilityAssessmentsSetting = RawServerVulnerabilityAssessmentsSettingImpl{}

// RawServerVulnerabilityAssessmentsSettingImpl is returned when the Discriminated Value doesn't match any of the defined types
// NOTE: this should only be used when a type isn't defined for this type of Object (as a workaround)
// and is used only for Deserialization (e.g. this cannot be used as a Request Payload).
type RawServerVulnerabilityAssessmentsSettingImpl struct {
	serverVulnerabilityAssessmentsSetting BaseServerVulnerabilityAssessmentsSettingImpl
	Type                                  string
	Values                                map[string]interface{}
}

func (s RawServerVulnerabilityAssessmentsSettingImpl) ServerVulnerabilityAssessmentsSetting() BaseServerVulnerabilityAssessmentsSettingImpl {
	return s.serverVulnerabilityAssessmentsSetting
}

func UnmarshalServerVulnerabilityAssessmentsSettingImplementation(input []byte) (ServerVulnerabilityAssessmentsSetting, error) {
	if input == nil {
		return nil, nil
	}

	var temp map[string]interface{}
	if err := json.Unmarshal(input, &temp); err != nil {
		return nil, fmt.Errorf("unmarshaling ServerVulnerabilityAssessmentsSetting into map[string]interface: %+v", err)
	}

	var value string
	if v, ok := temp["kind"]; ok {
		value = fmt.Sprintf("%v", v)
	}

	if strings.EqualFold(value, "AzureServersSetting") {
		var out AzureServersSetting
		if err := json.Unmarshal(input, &out); err != nil {
			return nil, fmt.Errorf("unmarshaling into AzureServersSetting: %+v", err)
		}
		return out, nil
	}

	var parent BaseServerVulnerabilityAssessmentsSettingImpl
	if err := json.Unmarshal(input, &parent); err != nil {
		return nil, fmt.Errorf("unmarshaling into BaseServerVulnerabilityAssessmentsSettingImpl: %+v", err)
	}

	return RawServerVulnerabilityAssessmentsSettingImpl{
		serverVulnerabilityAssessmentsSetting: parent,
		Type:                                  value,
		Values:                                temp,
	}, nil

}
