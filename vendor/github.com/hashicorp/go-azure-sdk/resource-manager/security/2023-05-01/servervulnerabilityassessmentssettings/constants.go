package servervulnerabilityassessmentssettings

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type ServerVulnerabilityAssessmentsAzureSettingSelectedProvider string

const (
	ServerVulnerabilityAssessmentsAzureSettingSelectedProviderMdeTVM ServerVulnerabilityAssessmentsAzureSettingSelectedProvider = "MdeTvm"
)

func PossibleValuesForServerVulnerabilityAssessmentsAzureSettingSelectedProvider() []string {
	return []string{
		string(ServerVulnerabilityAssessmentsAzureSettingSelectedProviderMdeTVM),
	}
}

func (s *ServerVulnerabilityAssessmentsAzureSettingSelectedProvider) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseServerVulnerabilityAssessmentsAzureSettingSelectedProvider(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseServerVulnerabilityAssessmentsAzureSettingSelectedProvider(input string) (*ServerVulnerabilityAssessmentsAzureSettingSelectedProvider, error) {
	vals := map[string]ServerVulnerabilityAssessmentsAzureSettingSelectedProvider{
		"mdetvm": ServerVulnerabilityAssessmentsAzureSettingSelectedProviderMdeTVM,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := ServerVulnerabilityAssessmentsAzureSettingSelectedProvider(input)
	return &out, nil
}

type ServerVulnerabilityAssessmentsSettingKind string

const (
	ServerVulnerabilityAssessmentsSettingKindAzureServersSetting ServerVulnerabilityAssessmentsSettingKind = "AzureServersSetting"
)

func PossibleValuesForServerVulnerabilityAssessmentsSettingKind() []string {
	return []string{
		string(ServerVulnerabilityAssessmentsSettingKindAzureServersSetting),
	}
}

func (s *ServerVulnerabilityAssessmentsSettingKind) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseServerVulnerabilityAssessmentsSettingKind(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseServerVulnerabilityAssessmentsSettingKind(input string) (*ServerVulnerabilityAssessmentsSettingKind, error) {
	vals := map[string]ServerVulnerabilityAssessmentsSettingKind{
		"azureserverssetting": ServerVulnerabilityAssessmentsSettingKindAzureServersSetting,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := ServerVulnerabilityAssessmentsSettingKind(input)
	return &out, nil
}
