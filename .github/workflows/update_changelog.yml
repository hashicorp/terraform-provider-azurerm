name: Update Changelog with new commit

permissions:
  pull-requests: write
  contents: write

on:
  pull_request:
    # Inputs the workflow accepts.
    types: [closed]

jobs:
  pull-commit-message:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      message: ${{ steps.pull.outputs.message }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        continue-on-error: true
      - name: get merge commit message 
        id: pull
        run: |
         pull_number="$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")" 
         commit_message="$(git log --pretty="format:%b")"
         echo message="$commit_message [GH-$pull_number]"  >> $GITHUB_OUTPUT
  # check-for-changelog-entry
  changelog-entry:
    # if contains to check for bug, enhancement, feature
    if: ${{ contains(needs.pull-commit-message.outputs.message, '[BUG]') || contains(needs.pull-commit-message.outputs.message, '[ENHANCEMENT]') || contains(needs.pull-commit-message.outputs.message, '[FEATURE]') }}
    runs-on: ubuntu-latest
    needs: pull-commit-message
    outputs:
      optIn: ${{ steps.in.outputs.bool }}
      entry: ${{  needs.pull-commit-message.outputs.message  }}
    steps:
      - name: changelog entry opt in
        id: in
        continue-on-error: true
        run: echo "opted in to changelog entry" | echo bool="true" >> $GITHUB_OUTPUT
  # if there is a changelog entry, check for PR Open
  update-changelog:
    if: needs.changelog-entry.outputs.optIn
    runs-on: ubuntu-latest
    needs: changelog-entry
    steps:
      - name: Check if PR exists
        id: check
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --json title \
              --label "changelog" \
              --jq 'length')
          if [[  $prs -gt 0  ]]; then
              echo "existing=true" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: check for branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          BRANCH=automated-changelog
          if gh api repos/hashicorp/terraform-provider-azurerm/branches/$BRANCH > /dev/null 2>&1; then
            echo "Branch exists on remote..."
            git fetch origin $BRANCH
            git checkout $BRANCH
          else
            echo "Branch does not exist on remote, creating locally..."
            git checkout -b $BRANCH
          fi
          
      - name: Create pull request
      #if changelog PR isn't already open, open one
      #create a new PR, start with appending the release number and (unreleased)
        if: '!steps.check.outputs.existing'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          
          #new pull request for new release needs the headers all added to the top
          FILE="CHANGELOG.md"
          version=$(head -n 1 "$FILE")
          IFS='.' read major minor patch <<< "$version"
          ((minor++))
          patch=$(echo $patch | sed 's/ (.*)//')
          new_version="${major}.$minor.${patch} (Unreleased)"
          headers="${new_version}\n\nENHANCEMENTS:\n\nFEATURES:\n\nBUG FIXES:\n"
          temp_file=$(mktemp)
          echo -e "$headers" > "$temp_file"
          cat "$FILE" >> "$temp_file"
          mv "$temp_file" "$FILE"
          echo "File has been updated."

          major=$(echo $major | sed 's/## //')
          RELEASENUM="${major}.$minor.${patch}"

          git add CHANGELOG.md
          git commit -m "staring new changelog PR"
          git push --set-upstream origin automated-changelog
          echo "Creating a new pull request"
          gh pr create \
          --repo "$GITHUB_REPOSITORY" \
          --base main \
          --head automated-changelog \
          -l "changelog" \
          -t "CHANGELOG.md for $RELEASENUM" \
          -b "Automated changelog for next release, $RELEASENUM"
      
      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: '1.22'

      - name: Add commit message to changelog pull request
      # at this point a PR is opened for sure, now add entry
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          
          go run internal/tools/changelog-updater/update_changelog.go CHANGELOG.md '${{ needs.changelog-entry.outputs.entry }}'
          
          git add CHANGELOG.md
          git commit -m "Update changelog"
          git push --set-upstream origin automated-changelog
      
